#!/usr/bin/env python
# coding: utf-8

# # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É

#         1. –§–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ –ª–∏—á–Ω—ã—Ö —Ü–µ–ª—è—Ö, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥ –≤ –º–æ–∏—Ö –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á–∞—Ö
#         2. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –±—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ –ø–æ –º–µ—Ä–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –º–æ–µ–º –ª–∏—á–Ω–æ–º –±–∞–≥–∞–∂–µ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
#         3. –î–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞ "–∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç—å", —è –Ω–µ –ø—ã—Ç–∞–ª—Å—è "–Ω–∞–≤–æ–¥–∏—Ç—å –∫—Ä–∞—Å–æ—Ç—É", –∑–¥–µ—Å—å –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—á–∏–µ –º–µ—Ç–æ–¥—ã, –∞ —É–∂ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç/–∑–∞–¥–∞—á—É –º–æ–∂–Ω–æ –∏ –∫—Ä–∞—Å–æ—Ç—É –Ω–∞–≤–µ—Å—Ç–∏ :)
#         4. –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
#         
# **P.S. –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç "–∫–∞–∫ –µ—Å—Ç—å" –ª—É—á—à–µ, —á–µ–º "–∫—Ä–∞—Å–æ—Ç–∞ –∏ –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç—å", –ª–µ–∂–∞—â–∞—è –≤ "–¥–∞–ª—å–Ω–µ–º —è—â–∏–∫–µ", –æ –∫–æ—Ç–æ—Ä–æ–π –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç**

# –Ø –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–±—ã–≤–∞—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞/–º–µ—Ç–æ–¥–∞, –ø–æ—ç—Ç–æ–º—É —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Å–µ–±—è –æ–¥–∏–Ω —Ñ–∞–π–ª-—à–ø–∞—Ä–≥–∞–ª–∫—É, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –≤–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –º–µ–Ω—è, —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
# 
# –î–ª—è –ø–æ–¥–æ–±–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞-—à–ø–∞—Ä–≥–∞–ª–∫–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –≥–æ—Ç–æ–≤—ã–º–∏ **Jupyter Notebook** –¥–ª—è **Data Science**:
# 
# 1. Data Science Handbook (by Jake VanderPlas) ‚Äî —ç—Ç–æ –∫–Ω–∏–≥–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –∏ –Ω–∞–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–æ–≤:
# - GitHub Jake VanderPlas
# https://github.com/jakevdp/PythonDataScienceHandbook
# 
# 2. Awesome Data Science Notebooks ‚Äî —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –Ω–∞–±–æ—Ä–æ–º Jupyter Notebook –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ Data Science:
# - Awesome DS Notebooks
# https://github.com/jupyter-naas/awesome-notebooks
# 
# 3. –ê–≤—Ç–æ—Ä –º–Ω–æ–≥–∏—Ö –∫–Ω–∏–≥ –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é, –±–æ–ª—å—à–µ 10 –ª–µ—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∫–æ–¥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
# https://github.com/rasbt/python-machine-learning-book/

# # –í–Ω–µ—à–Ω–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ—Ç—Ä–∞–¥–∫–∏

# ## –¢–µ–º—ã Jupyter Notebook

# In[1]:


# !pip install jupyterthemes

## –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
# jt -t chesterish

## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑
# jt -r


# ## –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∞–º–∏

# –°–∏–Ω–∏–π —Ñ–æ–Ω —è—á–µ–π–∫–∏
# ```
# <div class = "alert alert-info" style="border-left: 7px solid blue">
# <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ</b>
#     
# –¢–µ–∫—Å—Ç —è—á–µ–π–∫–∏
# </div>
# ```

# –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω —è—á–µ–π–∫–∏
# ```
# <div style="border:solid Green 2px; padding: 40px">
# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Ññ_<a class="tocSkip"> </h2>
# 
# <font color='green'><b> –ü—Ä–∏–Ω—è—Ç–æ </b>  </font>
# 
# –¢–µ–∫—Å—Ç
# ```

# –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ñ–æ–Ω —è—á–µ–π–∫–∏
# 
# ```
# <div style="border:solid Orange 2px; padding: 40px">
# <div class="alert alert-warning">
#     <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Ññ_ <a class="tocSkip"> </h2>
#     
# <font color='Orange'><b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üí°:</b> </font>
#         
# –¢–µ–∫—Å—Ç —è—á–µ–π–∫–∏
# ```

# –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω —è—á–µ–π–∫–∏
# ```
# <br/>
# <div style="border:solid Red 2px; padding: 40px">
#     <div class="alert alert-block alert-danger">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Ññ_  <a class="tocSkip"></h2>
# 
# <font color='red'><b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É ‚ùå:</b>  </font>
#     
# –¢–µ–∫—Å—Ç –∑–∞–º–µ—á–∞–Ω–∏—è
#     
#     
# </div>
# ```

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∞–º–æ–∫ –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏
# 
# ```
# –≥–æ–ª—É–±–∞—è —Ç–æ–Ω–∫–∞—è:
# <div style='border: 3px solid #67a0f549; padding: 20px'>
# 
# –∑–µ–ª–µ–Ω–∞—è —É—Ç–æ–ª—â–µ–Ω–Ω–∞—è:
# <div style='border:solid green 5px; padding: 20px'>
# ```

# ## –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä

# In[2]:


# # –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
# import time
# from tqdm import tqdm

# mylist = [1,2,3,4,5]

# for i in tqdm(mylist):
#     time.sleep(1)


# ## –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ç—Ä–∞–¥–∫—É –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ —Å—Å—ã–ª–∫–µ

# In[3]:


from IPython.display import Image # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫

display(Image(url='https://storage.googleapis.com/kaggle-datasets-images/188635/421394/be1365b1ef651ba7dc49f33588f008dc/dataset-cover.jpg?t=2019-05-09-21-51-02', 
              width = '') # width = 200 –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–¥–∞–µ—Ç —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø—É—Å—Ç–æ—Ç–∞ - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
       ) 
# display(Image(filename='Python_royal_35.JPG', width = 200)) # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª


# # –î–∞—Ç–∞—Å–µ—Ç Spanish Rail Tickets Pricing - Renfe

# –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ö–∞–≥–ª:
# 
# https://www.kaggle.com/datasets/thegurusteam/spanish-high-speed-rail-system-ticket-pricing/data

# ## –°–≤–µ–¥–µ–Ω–∏—è –æ–± –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

# –î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∞ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏—Å–ø–∞–Ω—Å–∫–æ–π –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã **Renfe**. –û–Ω –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
# 
# - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: –£–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è.
# - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ: –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
# - –ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: –ù–∞–ø—Ä–∏–º–µ—Ä, —ç–∫–æ–Ω–æ–º –∏–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å.
# - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: –í—Ä–µ–º—è –≤ –ø—É—Ç–∏.
# - –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–∏–ø–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.
# - –ù–∞–ª–∏—á–∏–µ –º–µ—Å—Ç: –£–∫–∞–∑–∞–Ω–æ, —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
# 
# –≠—Ç–æ—Ç –¥–∞—Ç–∞—Å–µ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, —Ç–∞–∫–∏—Ö –∫–∞–∫ DNN (–≥–ª—É–±–æ–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏) –∏–ª–∏ XGBoost.

# - id - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
# - company - –∫–æ–º–ø–∞–Ω–∏—è
# - origin - —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
# - destination - –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∞ –ø—Ä–∏–±—ã—Ç–∏—è)
# - departure - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# - arrival - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
# - duration - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
# - vehicle_type - —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
# - vehicle_class - –∫–ª–∞—Å—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
# - price - —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞

# ## –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ—Ö–≤–∞—Ç–∞—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫

# In[4]:


# !pip install missingno


# In[5]:


# !pip install chart-studio


# In[6]:


# !pip install pykalman 


# In[7]:


# !pip install filterpy


# In[8]:


# !pip install phik


# –ò–º–ø–æ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

# In[9]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter, AutoDateLocator
import seaborn as sns
import datetime


# –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
from tqdm import tqdm

from chart_studio import plotly
import plotly.graph_objs as go
import plotly.graph_objs as go
from plotly.offline import iplot
from chart_studio import plotly as py
from plotly.offline import init_notebook_mode, iplot

import phik
from phik.report import plot_correlation_matrix
from phik import report

# –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
import statsmodels.api as sm
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.graphics import tsaplots
from statsmodels.tsa.stattools import adfuller

# —Ñ–∏–ª—Ç—Ä –ö–∞–ª–º–∞–Ω–∞
from filterpy.kalman import KalmanFilter

# –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import warnings
warnings.filterwarnings("ignore")


# # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

# In[10]:


# –ø—É—Ç—å –∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é —Ñ–∞–π–ª–∞
path = 'D://MyProjects//Spanish Rail Ticket Pricing - Renfe//thegurus-opendata-renfe-trips.csv'


# ## –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞

# In[11]:


# # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞
# df = pd.read_csv(path, index_col=0)


# ## –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞

# In[12]:


# # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è tqdm —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# tqdm.pandas()

# # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
# df = pd.read_csv(path, index_col=0, iterator=True, chunksize=10000000)
# # chunksize=10000000 - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏

# # –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –≤ DataFrame
# df = pd.concat([chunk.progress_apply(lambda x: x) for chunk in tqdm(df, total=38)], ignore_index=True)


# ## –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–¥–∞

# In[13]:


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö nrows —Å—Ç—Ä–æ–∫ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
df = pd.read_csv(path, index_col=0, nrows=1e6)

# index_col=0 - –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—Ç–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–¥–µ–∫—Å–∞
# nrows=10000 - —á—Ç–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10000 —Å—Ç—Ä–æ–∫


# ## –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö 10 000 —Å—Ç—Ä–æ–∫ –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞

# In[14]:


# # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
# total_rows = sum(1 for _ in open(path)) - 1  # -1, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞

# # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É–¥ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è
# skip_rows = sorted(np.random.choice(range(1, total_rows + 1), total_rows - 10000, replace=False))

# # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
# df = pd.read_csv(path, index_col=0, skiprows=skip_rows)


# In[15]:


df = df.sort_values(by='departure')


# In[16]:


# –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
df.head(3)


# # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# ## –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–º–∞

# In[17]:


# –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
df.info()


# In[18]:


# —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ (—Å—Ç—Ä–æ–∫, —Å—Ç–æ–ª–±—Ü–æ–≤)
df.shape


# ### –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É

# In[19]:


def df_info(df):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤
    
    '''
    print("-"*100)
    print('–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞–º–∏—è –æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ:')
    print("-"*100)
    print(df.info())
    
    print("-"*100)
    print('–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã')
    print("-"*100)
    display(df.head(5))
    
    print("-"*100)
    print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤')
    print("-"*100)
    print(df.isnull().sum().sort_values(ascending=False))
    
    print("-"*100)
    print('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞')
    print("-"*100)
    display(np.round(df.describe(), 2).T)
    
    print("-"*100)
    print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:')
    print("-"*100)
    display(df.duplicated().sum())


# In[20]:


df_info(df)


# ## –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Ö

# In[21]:


# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
df.isnull().sum()


# In[22]:


# –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ —Å—Ç–æ–ª–±—Ü—É
(df.isnull().sum() / df.shape[0]) * 100


# ### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤

# In[23]:


# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö 1000 —Å—Ç—Ä–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
sns.heatmap(df[:1000].isna().transpose(), cmap="crest", cbar_kws={'label': '–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö'})
plt.show()


# ## –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ

# In[24]:


df['origin'].unique()


# ## –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø—Ä–∏–∑–Ω–∞–∫–æ–≤) —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –∏–ª–∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤

# In[25]:


# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
df = df.drop(columns=['seats','meta', 'insert_date'])


# In[26]:


df.head(2)


# ## –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤

# In[27]:


# —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ price
df.dropna(subset=['price'], inplace=True)


# –ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É

# In[28]:


# # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
# df['price'].fillna(df['price'].mean(), inplace=True)


# In[29]:


# # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
# columns = ['train_class','fare']
# for c in columns:
#     df[c].fillna(df[c].mode()[0], inplace=True)


# –ò–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤–æ –≤—Å–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ "–æ–¥–Ω–∏–º –º–∞—Ö–æ–º"

# In[30]:


# # –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
# df.dropna(inplace=True)


# In[31]:


# # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
# df = df.reset_index()


# In[32]:


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
df.isnull().sum()


# ## –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤

# In[33]:


# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–∏–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–æ–±—Ü–æ–≤ –≤ –≤–∏–¥–µ "—Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
column_dict = {
    "departure" : "start_date",
    "arrival" : "end_date",
    "vehicle_type" : "train_type",
    "vehicle_class" : "train_class"
}


# In[34]:


# df = df.rename(columns = column_dict)


# ## –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø—Ä–∏–∑–Ω–∞–∫–æ–≤)

# –°–æ–∑–¥–∞–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –°–¢–†–û–ö–û–í–´–• –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ **departure**

# In[35]:


# –∑–¥–µ—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ—Ä—É—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —Å 11 –ø–æ 13 —ç–ª–µ–º–º–µ–Ω—Ç (—Ç.–∫. –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏)
#  –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ departure, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–æ–ª–±–µ—Ü departure_hour
df['departure_hour'] = df.apply(lambda x: int(x['departure'][11:13]), axis=1)


# In[36]:


# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç datetime
datetimeFormat = '%Y-%m-%d %H:%M:%S'
def fun(a,b):
    diff = datetime.datetime.strptime(b, datetimeFormat)- datetime.datetime.strptime(a, datetimeFormat)
    return(diff.seconds/3600.0)


# In[37]:


df['travel_time_in_hrs'] = df.apply(lambda x: fun(x['departure'], x['arrival']), axis=1) 


# In[38]:


# –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
df.head(2)


# ## –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (datetime)

# In[39]:


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞—Ç—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
for i in ['departure','arrival']:
    df[i] = pd.to_datetime(df[i])


# In[40]:


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
df.info()


# ## –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–æ–π

# –ü–æ—Å–∫–æ–ª—å–∫—É –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –µ–µ –º–æ–∂–Ω–æ —Ä–∞–∑–ª–æ–∂–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: –≥–æ–¥, –º–µ—Å—è—Ü, —á–∏—Å–ª–æ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:

# In[41]:


for col in ['departure', 'arrival']:
    date_col = pd.to_datetime(df[col])
    df[col + '_hour'] = date_col.dt.hour
    df[col + '_minute'] = date_col.dt.minute
    df[col + '_second'] = date_col.dt.second
    df[col + '_weekday'] = date_col.dt.day_of_week
    df[col + '_day'] = date_col.dt.day
    df[col + '_month'] = date_col.dt.month
    df[col + '_year'] = date_col.dt.year
    
#     del df[col]


# In[42]:


df.head(2)


# ## –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö

# In[43]:


# —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ
list_columns_num = ['duration', 'price']

# —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - datetime –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ
list_columns_date = ['departure', 'arrival']


# In[44]:


def data_convert (dataframe, list_columns_num, list_columns_date):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∏—Å–ª–æ–≤—ã–µ –∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    
    '''
    for i in list_columns_num:
        dataframe[i] = dataframe[i].astype(float)
        
    for j in list_columns_date:
        dataframe[j] = pd.to_datetime(dataframe[j])
       
    return dataframe


# In[45]:


# # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
# df = data_convert(df, list_columns_num, list_columns_date)


# ## –í—ã–±–æ—Ä–∫–∞ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü

# In[46]:


# —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —É–¥–æ–±–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
list_columns = ['origin',
                'departure',
                'price'
               ]


# In[47]:


def df_select_columns (dataframe, list_columns):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã —Å–ø–∏—Å–∫–∞ list_columns –∏–∑ dataframe,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    
    '''  
    dataframe = dataframe[list_columns]
    
    return dataframe


# In[48]:


# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ –ª–∏—Å—Ç—É –•–•–•
df_select = df_select_columns (df, list_columns)


# In[49]:


# –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–±–æ—Ä–∫–∏
df_select.head(2)


# ## –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º

# In[50]:


# —Ç–∞–±–ª–∏—Ü–∞ - –≤—ã–±–æ—Ä–∫–∞ –ø–æ –¥–≤—É–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º:
# –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º MADRID —Å—Ç–æ–ª–±—Ü–∞ origin –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ SEVILLA —Å—Ç–æ–ª–±—Ü–∞ destination
df1 = df[(df['origin']=="MADRID") & (df['destination']=="SEVILLA")]
df1.head(3)


# In[51]:


f, ax = plt.subplots(figsize=(12, 2))
ax = sns.barplot(x="vehicle_type", y="price", data=df1)
plt.show()


# In[52]:


f, ax = plt.subplots(figsize=(12, 4))
ax = sns.barplot(x="vehicle_type", y="price", data=df1, palette="coolwarm")
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')
ax.set_xlabel('–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞')
ax.set_ylabel('–¶–µ–Ω–∞')
ax.set_title('–¶–µ–Ω—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º')

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –±–∞—Ä–∞—Ö
for p in ax.patches:
    ax.annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Y (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
ax.set_ylim(0, df1['price'].max() * 1.1)

plt.tight_layout()
plt.show()


# ## –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

# In[53]:


def data_selection(dataframe, column, name_unique):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º name_unique –≤ —Å—Ç–æ–ª–±—Ü–µ column,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É –≤ –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º df_unique
    –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è name_unique  
    
    '''
    df_unique = dataframe[(dataframe[column] == name_unique)]
    
    return df_unique


# In[54]:


# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∫–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
column_select = 'vehicle_type'
name_unique = 'AVE'

df_uniq = data_selection(df, column_select, name_unique)


# In[55]:


df_uniq.head(2)


# ## –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ –≤ –¥—Ä—É–≥–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è

# In[56]:


df_uniq['price'] = df_uniq['price'] / 1000


# In[57]:


df_uniq.head(2)


# ## –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º —Å—Ç–æ–ª–±—Ü–∞

# In[58]:


# —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Ç–æ–ª–±—Ü—É 'price'
df_sorted = df_uniq.sort_values(by='price')


# In[59]:


df_sorted.head()


# In[60]:


# –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
df_sorted['price'].hist(figsize=(10, 2), color='green', alpha=0.3, label='price') 
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã price')
plt.xlabel('price')
plt.ylabel('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫')
plt.legend()
plt.grid(True)
plt.minorticks_on()
plt.grid(which='major', linestyle='-', linewidth='0.5', color='black')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='grey')
plt.show()


# ## –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º origin, —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ price

# In[61]:


df_groupby = df.groupby('origin')['price'].sum()


# In[62]:


df_groupby


# # EDA - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

# ## –ß–∏—Å–ª–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

# ### –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ

# In[63]:


# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ vehicle_type
print(len(df['vehicle_type'].unique()))


# In[64]:


# –ø–µ—Ä–≤—ã–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ vehicle_type
unique_vehicle_type = df['vehicle_type'].unique()[:5]
unique_vehicle_type


# In[65]:


# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å—Ç–æ–ª–±—Ü–µ destination
df['destination'].count()


# ### –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ

# In[66]:


for col in df.columns:
    print(col, ":", df[col].unique().shape[0])


# ### –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏

# In[67]:


print(f" started date minimum value {df.departure.min()}")
print(f" started date maximum value {df.departure.max()}")


# ### –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

# In[68]:


# –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
print("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n")
df.describe()


# In[69]:


# –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ price
stat_column = 'price'
print(f'–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ {stat_column}:')
df[stat_column].describe()


# ## –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

# ### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π / —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å

# In[70]:


def make_features(data, MAX_LAG, ROLLING_MEAN_SIZE, column):
    '''—Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤'''
    
    num_col = []
    
    # –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏/–º–µ—Å—è—Ü
    data['–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏'] = data.index.dayofweek
    data['–º–µ—Å—è—Ü'] = data.index.month
    
    # –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    data['–≤—ã—Ö–æ–¥–Ω–æ–π'] = data.index.dayofweek.isin([5, 6]).astype(int)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    data['—Å–µ–∑–æ–Ω'] = data['–º–µ—Å—è—Ü'].apply(lambda x: '–í–µ—Å–Ω–∞' if x in [2, 3, 4, 5] else
                                                  '–õ–µ—Ç–æ' if x in [6, 7, 8] else
                                                  '–û—Å–µ–Ω—å' if x in [9, 10, 11] else
                                                  '–ó–∏–º–∞')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∑–∞–º–µ–Ω—ã —á–∏—Å–µ–ª –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_mapping = {
        0: '–ø–Ω',
        1: '–≤—Ç',
        2: '—Å—Ä',
        3: '—á—Ç',
        4: '–ø—Ç',
        5: '—Å–±',
        6: '–≤—Å'
    }

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã –∫ —Å—Ç–æ–ª–±—Ü—É '–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏'
    data['–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏'] = data['–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏'].map(days_mapping)

    if ROLLING_MEAN_SIZE > 0:     
        data['rolling_mean'] = data[column].shift().rolling(ROLLING_MEAN_SIZE).mean()
        num_col.append('rolling_mean')
        
    if MAX_LAG > 0:
        for lag in range(1, MAX_LAG + 1):
            data['lag_{}'.format(lag)] = data[column].shift(lag)
            num_col.append('lag_{}'.format(lag))            
   
    data.dropna(inplace=True)
    
    return data, num_col


# **–≤—ã—Ö–æ–¥–Ω–æ–π** - —Ñ–ª–∞–≥ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å:
# 
#  - 1 - –≤—ã—Ö–æ–¥–Ω–æ–π
#  - 0 - –±—É–¥–Ω–∏
# 
# **rolling_mean** - —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
# 
# **lag** - —Å–¥–≤–∏–≥ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π

# In[71]:


# —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ —Å–¥–≤–∏–≥–∞, –¥–Ω–µ–π
MAX_LAG = 10

# —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ, –¥–Ω–µ–π
ROLLING_MEAN_SIZE = 10


# In[72]:


# # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏
# df_features_Up = df_Unique_product.copy(deep=True)
# df_features_Up, NUM_FEATURES = make_features(df_Unique_product, MAX_LAG, ROLLING_MEAN_SIZE, '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')


# In[73]:


# # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
# labels = df_features_Up['–≤—ã—Ö–æ–¥–Ω–æ–π'].value_counts().index
# sizes = df_features_Up['–≤—ã—Ö–æ–¥–Ω–æ–π'].value_counts().values
# labels = df_features_Up['–≤—ã—Ö–æ–¥–Ω–æ–π'].value_counts()


# In[74]:


# # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
# plt.figure(figsize=(4, 4))
# plt.pie(df_features_Up.groupby('–≤—ã—Ö–æ–¥–Ω–æ–π')['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum(), labels=labels, autopct='%1.1f%%', startangle=45)
# plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö')
# plt.show()


# In[75]:


# sum_weekend = df_features_Up.groupby('–≤—ã—Ö–æ–¥–Ω–æ–π')['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
# sum_weekend


# In[76]:


df['origin'].unique()


# In[77]:


df_filtered = df[df['origin'].isin(["MADRID", "SEVILLA"])]


# In[78]:


# —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤
colors = ["#FF5733", "#33C4FF", "#FF33B8", "#3380FF"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
plt.figure(figsize=(12, 6), facecolor="#f0f0f0")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
time_series = sns.lineplot(
    x='departure', 
    y='price', 
    data = df_filtered, 
    hue='origin', 
    palette=colors
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Å–∏ X –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç (–µ—Å–ª–∏ departure —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—ã)
time_series.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m-%d'))
time_series.set_title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –±–∏–ª–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç—Ä–∞–Ω–∞–º", fontsize=16)
time_series.set_ylabel("–¶–µ–Ω–∞", fontsize=12)
time_series.set_xlabel("–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞", fontsize=12)

# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –≥—Ä–∞—Ñ–∏–∫–∞
time_series.legend(title='–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', loc='upper left', bbox_to_anchor=(1, 1))

# –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π
plt.xticks(rotation=45)
plt.tight_layout()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞
plt.grid()
plt.show()


# In[79]:


# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –∏ –æ—Å–∏
fig, ax = plt.subplots(figsize=(12, 5))

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ–∫—Å–ø–ª–æ—Ç–∞ –Ω–∞ –æ—Å–∏ `ax`
df[:10000].boxplot(by='destination', column=['price'], grid=False, ax=ax, patch_artist=True)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
ax.grid(True, linestyle='--', linewidth=0.5)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã –ø–æ –ø—É–Ω–∫—Ç–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', fontsize=14)
ax.set_xlabel('–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12)
ax.set_ylabel('–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞', fontsize=12)

# –ü–æ–≤–æ—Ä–æ—Ç –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
plt.xticks(rotation=45)

# –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.tight_layout()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.show()


# ### –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π

# In[80]:


# –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
df['price'].hist(figsize=(10, 2), color='green', alpha=0.5, label='price') 
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã price')
plt.xlabel('price')
plt.ylabel('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫')
plt.legend()
plt.grid(True)
plt.minorticks_on()
plt.grid(which='major', linestyle='-', linewidth='0.5', color='black')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='grey')
plt.show()


# In[81]:


# # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (DPI)
# fig, ax = plt.subplots(figsize=(12, 5), dpi=200)

# ax.plot(df.index, df['price'], label='–∑–Ω–∞—á–µ–Ω–∏–µ', color='green', alpha=0.5)
# ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è price')
# ax.set_xlabel('–¥–∞—Ç–∞')
# ax.set_ylabel('—Ü–µ–Ω–∞')

# # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ —á–∞—Å—Ç–æ—Ç—É –º–µ—Ç–æ–∫ –æ—Å–∏ X
# locator = AutoDateLocator()
# ax.xaxis.set_major_locator(locator)
# ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))

# plt.xticks(rotation=90)
# ax.legend()
# plt.grid(True)
# plt.minorticks_on()
# plt.grid(which='major', linestyle='-', linewidth='0.5', color='black')
# plt.grid(which='minor', linestyle=':', linewidth='0.5', color='grey')
# plt.tight_layout()
# plt.show()


# ### !!! –î–∏–∞–≥—Ä–∞–º–º—ã

# In[82]:


plt.figure(figsize=(11, 1))
sns.boxplot(x=df['price'])
# plt.xlim(0, 0.8)
plt.grid(True)
plt.show()


# In[83]:


cnt_ = df['vehicle_class'].value_counts()
cnt_ = cnt_.sort_index() 
fig = {
  "data": [
    {
      "values": cnt_.values,
      "labels": cnt_.index,
      "domain": {"x": [0, .5]},
      "name": "Percentage of journeys started and ended on same date",
      "hoverinfo":"label+percent+name",
      "hole": .5, # –ø—Ä–æ—Ü–µ–Ω—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
      "type": "pie"
    },],
  "layout": {
        "title":"Percentage of journeys started and ended on same date",
        "annotations": [
            { "font": { "size": 20},
              "showarrow": False,
             "text": "Pie Chart",
                "x": 0.50,
                "y": 1
            },
        ]
    }
}
iplot(fig)
cnt_


# In[84]:


cnt_srs = df['fare'].value_counts()
trace1 = go.Bar(
                x = cnt_srs.index,
                y = cnt_srs.values,
                marker = dict(color = 'rgba(0, 255, 200, 0.8)',
                             line=dict(color='rgb(0,0,0)',width=0.2)),
                text = cnt_srs.index)

data = [trace1]
layout = go.Layout(title = '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Fare')
fig = go.Figure(data = data, layout = layout)
iplot(fig)


# –° –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª–æ–π

# In[85]:


cnt_srs = df['fare'].value_counts()
trace1 = go.Bar(
                x=cnt_srs.index,
                y=cnt_srs.values,
                marker=dict(color='rgba(0, 200, 150, 0.8)',  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Ü–≤–µ—Ç
                            line=dict(color='rgb(0,0,0)', width=0.5)),
                text=cnt_srs.values,
                hoverinfo='x+y+text',
                width=0.8  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
)

data = [trace1]
layout = go.Layout(
    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Fare',
    xaxis_title='Fare',
    yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
    yaxis=dict(showgrid=True, gridcolor='rgba(200,200,200,0.5)'),
    yaxis_type='log'  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞
)

fig = go.Figure(data=data, layout=layout)
iplot(fig)


# In[86]:


cnt_srs = df['fare'].value_counts()

trace1 = go.Bar(
    x=cnt_srs.values,
    y=cnt_srs.index,
    orientation='h',
    marker=dict(color='rgba(155, 0, 100, 0.8)',
                line=dict(color='rgb(0,0,0)', width=0.2)),
    text=cnt_srs.index
)

data = [trace1]

layout = go.Layout(
    title='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã',
    width=1000,   # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
    height=400    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
)

fig = go.Figure(data=data, layout=layout)
iplot(fig)


# In[87]:


cnt_srs = df['duration'].value_counts()

# –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
trace1 = go.Scatter(
    x=cnt_srs.index,
    y=cnt_srs.values,
    mode="markers",
    marker=dict(size=10, color='rgba(100, 35, 55, 0.8)', line=dict(width=2, color='DarkSlateGrey')),
    text=cnt_srs.values,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    hoverinfo='x+y+text'
)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
data = [trace1]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
layout = dict(
    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–æ–∫',
    xaxis=dict(title='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)', ticklen=5, zeroline=False, showgrid=True),
    yaxis=dict(title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫', showgrid=True)
)

fig = dict(data = data, layout = layout)
iplot(fig)


# In[88]:


trace1 = go.Box(
    y=df.price[:10000,],
    name = 'Box plot of average travelling time in minutes only 50k observations',
    marker = dict(
        color = 'rgb(12, 12, 140)',
    )
)
data = [trace1]
iplot(data)


# In[89]:


df.groupby(['origin','vehicle_type'])['vehicle_type'].count()


# In[90]:


df.head(2)


# In[91]:


cnt_srs = df.groupby('vehicle_type')['price'].agg(['mean'])
cnt_srs.columns = ["mean"]
cnt_srs['vehicle_type'] = cnt_srs.index

data = [
    {
        'x': cnt_srs['vehicle_type'],
        'y': cnt_srs['mean'],
        'mode': 'markers+text',
        'text' : cnt_srs['vehicle_type'],
        'textposition' : 'bottom center',
        'marker': {
            'color': "#f27da6",
            'size': 15,
            'opacity': 0.9
        }
    }
]

layout = go.Layout(title="Average fare prices according to Train type", 
                   xaxis=dict(title='Train type'),
                   yaxis=dict(title='Average price(Euros)')
                  )
fig = go.Figure(data = data, layout = layout)
iplot(fig, filename='scatter0')


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –≤—ã—Ö–æ–¥—è—â–∏—Ö –Ω–∞ –ø–æ—Å–∞–¥–∫—É —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π

# In[92]:


fig, ax = plt.subplots(figsize=(12, 3))
ax = sns.countplot(df['origin'])
plt.show()


# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã

# In[93]:


f, ax = plt.subplots(figsize=(12, 4))
ax = sns.distplot(df['price'][500:1000], rug=True)
plt.show();


# In[94]:


import seaborn as sns
import matplotlib.pyplot as plt

# –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å—å
f, ax = plt.subplots(figsize=(12, 4))

# –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Å KDE
sns.histplot(
    df['price'][500:1000], kde=True, bins=30, ax=ax,
    color='orange', kde_kws={'bw_adjust': 0.5}
)

# –û—Ç–¥–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∏–º rugplot
sns.rugplot(
    df['price'][500:1000], ax=ax, color='green'
)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π –∏ —Å–µ—Ç–∫—É
ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω (–¥–ª—è —Å—Ç—Ä–æ–∫ —Å 500 –¥–æ 1000)')
ax.set_xlabel('–¶–µ–Ω–∞')
ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
ax.grid(True)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
plt.show()


# In[95]:


f, ax = plt.subplots(figsize=(12, 3))
ax = sns.boxplot(x='vehicle_class', y='price', data=df)
plt.show()


# In[96]:


plt.figure(figsize=(12, 4))
sns.scatterplot(data=df[df['destination'] != 'MADRID'].sample(1000), x='duration',
y='price', hue='destination');
plt.title('–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ú–∞–¥—Ä–∏–¥–∞)');
plt.xticks(range(24))
plt.show()


# –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã –º–æ–∂–µ–º –Ω–∞–±–ª—é–¥–∞—Ç—å, –∫–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ç–∞—Ä–∏—Ñ–æ–º-–ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –ø—Ä–∏ —ç—Ç–æ–º –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫, –Ω–∞–ø—Ä–æ—Ç–∏–≤, —Å–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –¥–ª—è –ø–æ–µ–∑–¥–æ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –≤ –í–∞–ª–µ–Ω—Å–∏—é.

# In[97]:


# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
sns.displot(
    df[df['destination'] == 'SEVILLA']['price'].dropna(), 
    bins=64, 
    kde=True,  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ KDE
    color='skyblue',  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
    height=5, aspect=1.9 # –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
plt.title('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã –≤ –°–µ–≤–∏–ª—å—é', fontsize=16)
plt.xlabel('–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞', fontsize=12)
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', fontsize=12)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞
plt.grid(True)
plt.show()


# –ù–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–π –≤—ã—à–µ –¥–∏–∞–≥—Ä–∞–º–º–µ –º—ã –≤–∏–¥–∏–º, —á—Ç–æ —Å–∞–º—ã–π –æ–±—ã—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ –ø–æ–µ–∑–¥–∞, —Å–ª–µ–¥—É—é—â–∏–µ –≤ –°–µ–≤–∏–ª—å—é, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á—É—Ç—å –º–µ–Ω–µ–µ 80 –µ–≤—Ä–æ, –∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 45-75 –µ–≤—Ä–æ, –ø—Ä–∏ —ç—Ç–æ–º —Ç–∞—Ä–∏—Ñ—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç—Ç–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≥–æ—Ä–∞–∑–¥–æ —Ä–µ–∂–µ.

# In[98]:


print(df['destination'].value_counts())


# In[99]:


# –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
plt.figure(figsize=(10, 5))

# –°—Ç—Ä–æ–∏–º –±–∞—Ä—á–∞—Ä—Ç —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
df['destination'].value_counts().sort_values().plot(kind='barh', color='skyblue')

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
plt.title('–ß–∞—Å—Ç–æ—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', fontsize=16)
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', fontsize=12)
plt.ylabel('–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
plt.grid(axis='x', linestyle='--', alpha=0.7)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
plt.show()


# In[100]:


# –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
plt.figure(figsize=(11, 5))

# –°—Ç—Ä–æ–∏–º countplot, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
sns.countplot(
    data=df, 
    y='destination',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    order=df['destination'].value_counts().index,  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    palette='coolwarm'  # –ü—Ä–∏—è—Ç–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
plt.title('–ß–∞—Å—Ç–æ—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ –ø—É–Ω–∫—Ç–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', fontsize=16)
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', fontsize=12)
plt.ylabel('–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
for index, value in enumerate(df['destination'].value_counts()):
    plt.text(value, index, str(value), va='center', ha='left', fontsize=10)

# –°–µ—Ç–∫–∞ –ø–æ –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
plt.grid(axis='x', linestyle='--', alpha=0.7)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.show()


# In[101]:


plt.figure(figsize=(15, 6))
df[:10000].groupby('fare')['destination'].value_counts().plot(kind='bar');
plt.title('–ß–∞—Å—Ç–æ—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç–∞—Ä–∏—Ñ–∞')
plt.show()


# In[102]:


# –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
plt.figure(figsize=(12, 6))

# –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏ –ø—É–Ω–∫—Ç–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
fare_destination_counts = df[:10000].groupby(['fare', 'destination']).size().unstack()

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ stacked bar –≥—Ä–∞—Ñ–∏–∫–∞
fare_destination_counts.plot(kind='bar', stacked=True, figsize=(12, 6), colormap='tab20')

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
plt.title('–ß–∞—Å—Ç–æ—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç–∞—Ä–∏—Ñ–∞', fontsize=16)
plt.xlabel('–¢–∞—Ä–∏—Ñ', fontsize=12)
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', fontsize=12)

# –ü–æ–≤–æ—Ä–æ—Ç –º–µ—Ç–æ–∫ –ø–æ –æ—Å–∏ X
plt.xticks(rotation=45)

# –õ–µ–≥–µ–Ω–¥–∞
plt.legend(title='–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', bbox_to_anchor=(1.05, 1), loc='upper left')

# –°–µ—Ç–∫–∞ –ø–æ –æ—Å–∏ Y
plt.grid(axis='y', linestyle='--', alpha=0.7)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.tight_layout()
plt.show();


# In[103]:


# –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
plt.figure(figsize=(12, 5))

# –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Å countplot —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
sns.countplot(x='destination', data=df[:10000], hue='fare', palette='Set2')

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
plt.title('–ß–∞—Å—Ç–æ—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ –ø—É–Ω–∫—Ç–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç–∞—Ä–∏—Ñ–∞–º', fontsize=16)
plt.xlabel('–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12)
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', fontsize=12)

# –ü–æ–≤–æ—Ä–æ—Ç –º–µ—Ç–æ–∫ –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
plt.xticks(rotation=45, ha='right')

# –õ–µ–≥–µ–Ω–¥–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –≥—Ä–∞—Ñ–∏–∫–∞
plt.legend(title='–¢–∞—Ä–∏—Ñ', bbox_to_anchor=(1.05, 1), loc='upper left')

# –°–µ—Ç–∫–∞ –¥–ª—è –æ—Å–∏ Y
plt.grid(axis='y', linestyle='--', alpha=0.7)

# –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.tight_layout()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.show()


# In[104]:


df.groupby('destination')['fare'].value_counts()


# In[105]:


dataFiltr = df.query("fare not in ['Promo', 'Flexible']")


# In[106]:


dataFiltr['fare'].unique()


# In[107]:


dataSample = df.sample(100)
dataSample.head(2)


# ### –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

# In[108]:


df_filtered


# In[109]:


# –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
numeric_df = df.select_dtypes(include=[np.number])

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
corr = numeric_df.corr()

# –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
mask = np.triu(np.ones_like(corr, dtype=bool))

# –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
plt.figure(figsize=(10, 8))

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
sns.heatmap(corr, annot=True, mask=mask, cmap="coolwarm", 
            vmin=-1, vmax=1, center=0, 
            linewidths=0.5, linecolor='gray',
            fmt='.2f', annot_kws={"size": 10})

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', fontsize=16)
plt.xlabel('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', fontsize=12)
plt.ylabel('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', fontsize=12)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.tight_layout()
plt.show()


# In[110]:


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–º–∞—Ç—Ä–∏—Ü—ã) –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º phik
phik_view = df[:1000].phik_matrix()
phik_view_rounded = phik_view.round(2)


# In[111]:


phik_view_rounded


# In[112]:


# –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–º phik
plt.figure(figsize=(15, 8))
sns.heatmap(phik_view_rounded, 
            annot=True, 
            cmap="crest", 
            vmin=0, 
            vmax=1, 
            center=0.5,  # –ü–æ—Å—Ç–∞–≤–∏–º —Ü–µ–Ω—Ç—Ä –Ω–∞ 0.5 –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            fmt='.2f',  # –§–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            linewidths=0.5, 
            linecolor='gray', 
            cbar_kws={'shrink': 0.8, 'label': 'Phik Correlation'},  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã
            annot_kws={"size": 10})

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
plt.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ—Ç–æ–¥–æ–º phik", fontsize=16)
plt.xlabel('–ü—Ä–∏–∑–Ω–∞–∫–∏', fontsize=12)
plt.ylabel('–ü—Ä–∏–∑–Ω–∞–∫–∏', fontsize=12)

# –ü–ª–æ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
plt.tight_layout()
plt.show()


# ### –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ —É–≥–ª–∞–º–∏

# –ù–∞–ø—Ä–∏–º–µ—Ä:
# - —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ —Å –≤—ã–±–æ—Ä–∫–æ–π –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç
# - —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
# - —Å—Ä–µ–¥–Ω—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º
# - –º–∞–∫—Å–∏–º—É–º, –º–∏–Ω–∏–º—É–º –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º

# In[113]:


df2 = df[(df['origin']=="MADRID") & (df['destination']=="BARCELONA")]
df2.head(3)


# # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞

# ## –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞

# In[114]:


# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'departure' –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
selected_columns = ['price', 'duration']  # –≤—ã–±–æ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
df_ts = df.set_index('departure')[selected_columns]


# In[115]:


df_ts.head()


# –õ–∏–±–æ –≤ —Ç–∞–∫–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ, –¥–∞—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º, –Ω–µ –≤ –∏–Ω–¥–µ–∫—Å–µ

# In[116]:


# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'departure' –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
selected_columns = ['departure', 'price', 'duration']  # –≤—ã–±–æ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
df_ts = df[selected_columns]


# In[117]:


df_ts.head()


# In[118]:


# –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
df_ts['date'] = df_ts['departure'].dt.date


# In[119]:


# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Å—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ 'price'
grouped_df = df_ts.groupby('date')['price'].sum().reset_index()


# In[120]:


grouped_df.head(10)


# ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç

# In[121]:


# # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'departure' –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
# selected_columns = ['price', 'duration', 'departure_hour']  # –≤—ã–±–æ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
# df_ts = df.set_index('departure')[selected_columns]


# In[122]:


# # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å–µ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—Ç
# if df_ts.index.is_monotonic_increasing:
#     print("–î–∞—Ç—ã –∏–¥—É—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.")
# else:
#     print("–î–∞—Ç—ã –Ω–µ –∏–¥—É—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.")


# In[123]:


# # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
# full_range = pd.date_range(start=df_ts.index.min(), end=df_ts.index.max(), freq='D')
# missing_dates = full_range.difference(df_ts.index)

# if len(missing_dates) > 0:
#     print("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã:", missing_dates)
# else:
#     print("–î–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç.")


# In[124]:


# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å–µ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—Ç
if grouped_df['date'].is_monotonic_increasing:
    print("–î–∞—Ç—ã –∏–¥—É—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.")
else:
    print("–î–∞—Ç—ã –Ω–µ –∏–¥—É—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.")


# In[125]:


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
full_range = pd.date_range(start=grouped_df['date'].min(), end=grouped_df['date'].max(), freq='D')
missing_dates = full_range.difference(grouped_df['date'])

if len(missing_dates) > 0:
    print("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã:", missing_dates)
else:
    print("–î–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç.")


# ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞, –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã

# In[126]:


def time_series_recovery(time_series):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ) –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞,
    —Ç.–µ. –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã, –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω—É–ª—è–º–∏
    
    '''
    time_series_recovery = time_series.reindex(
        pd.date_range(start=time_series.index.min(),
                      end=time_series.index.max(), freq='D'), fill_value=0) 
    
    return time_series_recovery


# In[127]:


df_ts_2 = grouped_df.set_index('date')


# In[128]:


df_ts_2[:5]


# In[129]:


df_ts_2_groupby = df_ts.groupby('departure')['price'].sum()
df_ts_2_groupby.head(10)


# In[130]:


# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ (—Ä–∞–≤–Ω–æ–º–µ—Ä–æ–≥–æ) –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
ts_recovery = time_series_recovery(df_ts_2)
ts_recovery.head(10)


# ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å

# In[131]:


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
result = adfuller(grouped_df['price'])
print("\nADF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", result[0])
print("p-value:", result[1])
print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
for key, value in result[4].items():
    print(f"\t{key}: {value}")

if result[1] < 0.05:
    print("\n–†—è–¥ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω (–æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏)")
else:
    print("\n–†—è–¥ –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω (–Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –æ –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏)")


# ## –°–µ–∑–æ–Ω–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è

# In[132]:


df_ts_resemp = df_ts.copy()


# In[133]:


df_ts_resemp = df_ts_resemp.set_index('departure')


# In[134]:


df_ts_resemp = df_ts_resemp['price']


# In[135]:


df_ts_resemp


# In[136]:


# –∏–∑–º–µ–Ω–µ–Ω–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –Ω–∞ —á–∞—Å–æ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–º
df_ts_resemp_H = df_ts_resemp.resample('1H').sum()
print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ 1—á: {df_ts_resemp_H.shape[0]}')


# In[137]:


print('–ù–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:', df_ts_resemp_H.index[0])
print('–ö–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:', df_ts_resemp_H.index[-1])
print('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:',df_ts_resemp_H.index.max() - df_ts_resemp_H.index.min())


# In[138]:


df_ts_resemp_H = df_ts_resemp.copy()
df_ts_resemp_H = df_ts_resemp_H.resample('1H').sum()

df_ts_resemp_D = df_ts_resemp.copy()
df_ts_resemp_D = df_ts_resemp_D.resample('1D').sum()

df_ts_resemp_W = df_ts_resemp.copy()
df_ts_resemp_W = df_ts_resemp_W.resample('1W').sum()


# In[139]:


# print(df_ts_resemp_D.index.is_monotonic)


# In[140]:


# –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤–µ—Å—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
df_ts_resemp_H.plot(figsize=(12, 3))
plt.legend()
plt.title('–ò–∑–º–µ–Ω–µ–Ω–∏–µ price –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
plt.xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª')
plt.ylabel('price')
plt.show;


# In[141]:


# –≥—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤ —Ç–∞–∫—Å–∏ –∑–∞ 10 –¥–Ω–µ–π
plt.figure(figsize=(11, 3))
df_ts_resemp_H['2019-05-15':'2019-05-25'].plot(figsize=(12, 3))
plt.legend()
plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ: 10 –¥–Ω–µ–π')
plt.xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
plt.show;


# ## –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ

# In[142]:


# –ø–æ—Å—Ç—Ä–æ–∏–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ä–æ–º –æ–∫–Ω–∞ = 24—á
plt.figure(figsize=(12, 5))
plt.plot(df_ts_resemp_H, label = '—á–∏—Å–ª–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —á–∞—Å')
plt.plot(df_ts_resemp_H.rolling(24).mean(), label = '—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ —Å—É—Ç–∫–∏')
plt.plot(df_ts_resemp_H.rolling(24).std(), label = '—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', color='green')

plt.legend()
plt.title('–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ')
plt.xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
plt.show;


# ## –¢—Ä–µ–Ω–¥—ã –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
# 

# In[143]:


# —Ä–∞–∑–¥–µ–ª–∏–º –Ω–∞ —Ç—Ä–µ–Ω–¥—ã —Ñ—É–Ω–∫—Ü–∏–µ–π seasonal_decompose
decomposed_h = seasonal_decompose(df_ts_resemp_H)

plt.figure(figsize=(11, 9))

plt.subplot(311)
# –ß—Ç–æ–±—ã –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è,
# —É–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –æ—Å–∏ ax, —Ä–∞–≤–Ω—ã–º–∏ plt.gca() (–∞–Ω–≥–ª. get current axis, –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Å–∏)
decomposed_h.trend.plot(ax=plt.gca())
plt.title('Trend')

plt.subplot(312)
decomposed_h.seasonal.plot(ax=plt.gca())
plt.title('Seasonality')

plt.subplot(313)
decomposed_h.resid.plot(ax=plt.gca())
plt.title('Residuals')

plt.tight_layout()


# In[144]:


decomp_df = seasonal_decompose(df_ts_resemp_H, period=30)  # , model='additive', period=30 –ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
trend = decomp_df.trend
seasonal = decomp_df.seasonal
residual = decomp_df.resid


# In[145]:


decomp_df


# In[146]:


plt.figure(figsize=(10, 8))

plt.subplot(411)
plt.plot(df_ts_resemp_H, color = 'green', label='price')
plt.legend(loc='best')

plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='best')

plt.subplot(413)
plt.plot(seasonal, label='Seasonality')
plt.legend(loc='best')

plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='best')

plt.tight_layout()


# In[147]:


# —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
fig, ax = plt.subplots(2, figsize=(12, 8))
plot_acf(df_ts_resemp_H, lags=90, ax=ax[0])
plot_pacf(df_ts_resemp_H, lags=90, ax=ax[1])
ax[0].grid(True)
ax[1].grid(True)
plt.show()


# ## –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ

# In[148]:


# –≤—ã–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
time_series_1 = df_ts_resemp_H
time_series_1


# In[149]:


# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ
fft_result = np.fft.fft(time_series_1)


# In[150]:


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥ —Å–ø–µ–∫—Ç—Ä–∞
amplitudes = np.abs(fft_result)
# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç (—Ü–∏–∫–ª–æ–≤ –≤ –¥–µ–Ω—å)
N = len(time_series_1)
freqs = np.fft.fftfreq(N)


# In[151]:


# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å —Å–ø–µ–∫—Ç—Ä–∞
amplitudes_pos = amplitudes[:len(amplitudes)//2]
freqs_pos = freqs[:len(freqs)//2]


# In[152]:


# –ù–∞—Ö–æ–¥–∏–º 5 –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö —á–∞—Å—Ç–æ—Ç, –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ (–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–≥–æ) –∑–Ω–∞—á–µ–Ω–∏—è 
top_freq_indices = np.argsort(amplitudes_pos)[::-1][1:6]


# In[153]:


# –í—ã–≤–æ–¥–∏–º –¥–Ω–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ (—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏)
periods = 1 / freqs_pos[top_freq_indices]
print("–ù–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –¥–Ω–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ (—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏):")
for i, period in enumerate(periods):
    print(f"–ß–∞—Å—Ç–æ—Ç–∞: {freqs_pos[top_freq_indices[i]]:.4f} —Ü–∏–∫–ª–æ–≤/–¥–µ–Ω—å, –î–Ω–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {period:.2f} –¥–Ω–µ–π")


# In[154]:


# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥ —Å–ø–µ–∫—Ç—Ä–∞ 
plt.figure(figsize=(10, 5))
plt.plot(freqs_pos[1:], amplitudes_pos[1:], color = 'green')
plt.title('–ê–º–ø–ª–∏—Ç—É–¥–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è')
plt.xlabel('–ß–∞—Å—Ç–æ—Ç–∞ (—Ü–∏–∫–ª–æ–≤/–¥–µ–Ω—å)')
plt.ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
plt.grid(True)
plt.show()


# ### –§–∏–ª—å—Ç—Ä –°–∞–≤–∏—Ü–∫–æ–≥–æ-–ì–æ–ª–µ—è

# In[155]:


from scipy.signal import savgol_filter


# In[156]:


# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –°–∞–≤–∏—Ü–∫–æ–≥–æ-–ì–æ–ª–µ—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
smoothed_time_series = savgol_filter(time_series_1, window_length=5, polyorder=2)


# In[157]:


# –≥—Ä–∞—Ñ–∏–∫
plt.figure(figsize=(12, 4))
plt.plot(time_series_1.index, time_series_1, label='–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥')
plt.plot(time_series_1.index, smoothed_time_series, label='–û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç —à—É–º–∞', linestyle='--')
plt.title('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –°–∞–≤–∏—Ü–∫–æ–≥–æ-–ì–æ–ª–µ—è')
plt.legend()
plt.show()


# ### –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞

# In[158]:


def kalman_filter(time_series):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞
    kf = KalmanFilter(dim_x=1, dim_z=1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—é
    kf.x = np.array([[time_series[0]]])  # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    kf.P *= 1000  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    kf.F = np.array([[1]])  # –º–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
    kf.H = np.array([[1]])  # –º–∞—Ç—Ä–∏—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–∏ —à—É–º–æ–≤
    kf.R *= 0.01  # –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    kf.Q *= 0.01  # –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ä—è–¥—É
    filtered_values = []
    for measurement in time_series:
        kf.predict()  # –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        kf.update(measurement)  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        filtered_values.append(kf.x[0, 0])  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫

    return filtered_values


# In[159]:


filtered_series = kalman_filter(time_series_1)


# In[160]:


# –≥—Ä–∞—Ñ–∏–∫
plt.figure(figsize=(12, 4))
plt.plot(time_series_1.index, time_series_1, label='–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥')
plt.plot(time_series_1.index, filtered_series, label='–û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç —à—É–º–∞', linestyle='--')
plt.title('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞')
plt.legend()
plt.show()


# # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –≤ —Ñ–∞–π–ª

# In[161]:


# # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–∞–π–ª
# path = r'D:\MyProjects\save_data\df_ts.xlsx'
# df_ts[:100].to_excel(path, index=True)
# # [:100] - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 100 —Å—Ç—Ä–æ–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–º–µ—Ä–∞ —Ñ–∞–π–ª–∞


# In[ ]:




